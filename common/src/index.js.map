{
  "version": 3,
  "sources": ["src/environment.ts", "src/proxies.ts", "src/branding.ts", "src/index.ts"],
  "sourcesContent": [
    "/** Define process.env to contain `TrustificationEnvType` */\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace NodeJS {\n    interface ProcessEnv extends Partial<Readonly<TrustificationEnvType>> {}\n  }\n}\n\n/**\n * The set of environment variables used by `@trustify-ui` packages.\n */\nexport type TrustificationEnvType = {\n  NODE_ENV: \"development\" | \"production\" | \"test\";\n  VERSION: string;\n\n  /** Controls how mock data is injected on the client */\n  MOCK: string;\n\n  /** Enable RBAC authentication/authorization */\n  AUTH_REQUIRED: \"true\" | \"false\";\n\n  /** SSO / Oidc client id */\n  OIDC_CLIENT_ID?: string;\n\n  /** SSO / Oidc scope */\n  OIDC_SCOPE?: string;\n\n  /** UI upload file size limit in megabytes (MB), suffixed with \"m\" */\n  UI_INGRESS_PROXY_BODY_SIZE: string;\n\n  /** The listen port for the UI's server */\n  PORT?: string;\n\n  /** Target URL for the UI server's `/auth` proxy */\n  OIDC_SERVER_URL?: string;\n\n  /** Whether or not `/auth` proxy will be enabled */\n  OIDC_SERVER_IS_EMBEDDED?: \"true\" | \"false\";\n\n  /** The Keycloak Realm */\n  OIDC_SERVER_EMBEDDED_PATH?: string;\n\n  /** Target URL for the UI server's `/api` proxy */\n  TRUSTIFY_API_URL?: string;\n\n  /** Location of branding files (relative paths computed from the project source root) */\n  BRANDING?: string;\n\n  /** Enable Analytics */\n  ANALYTICS_ENABLED: \"true\" | \"false\";\n\n  /** Segment Write key */\n  ANALYTICS_WRITE_KEY?: string;\n};\n\n/**\n * Keys in `TrustificationEnv` that are only used on the server and therefore do not\n * need to be sent to the client.\n */\nexport const SERVER_ENV_KEYS = [\"PORT\", \"TRUSTIFY_API_URL\", \"BRANDING\"];\n\n/**\n * Create a `TrustificationEnv` from a partial `TrustificationEnv` with a set of default values.\n */\nexport const buildTrustificationEnv = ({\n  NODE_ENV = \"production\",\n  PORT,\n  VERSION = \"99.0.0\",\n  MOCK = \"off\",\n\n  OIDC_SERVER_URL,\n  OIDC_SERVER_IS_EMBEDDED = \"false\",\n  OIDC_SERVER_EMBEDDED_PATH,\n  AUTH_REQUIRED = \"true\",\n  OIDC_CLIENT_ID,\n  OIDC_SCOPE,\n\n  UI_INGRESS_PROXY_BODY_SIZE = \"500m\",\n  TRUSTIFY_API_URL,\n  BRANDING,\n\n  ANALYTICS_ENABLED = \"false\",\n  ANALYTICS_WRITE_KEY,\n}: Partial<TrustificationEnvType> = {}): TrustificationEnvType => ({\n  NODE_ENV,\n  PORT,\n  VERSION,\n  MOCK,\n\n  OIDC_SERVER_URL,\n  OIDC_SERVER_IS_EMBEDDED,\n  OIDC_SERVER_EMBEDDED_PATH,\n  AUTH_REQUIRED,\n  OIDC_CLIENT_ID,\n  OIDC_SCOPE,\n\n  UI_INGRESS_PROXY_BODY_SIZE,\n  TRUSTIFY_API_URL,\n  BRANDING,\n\n  ANALYTICS_ENABLED,\n  ANALYTICS_WRITE_KEY,\n});\n\n/**\n * Default values for `TrustificationEnvType`.\n */\nexport const TRUSTIFICATION_ENV_DEFAULTS = buildTrustificationEnv();\n\n/**\n * Current `@trustify-ui` environment configurations from `process.env`.\n */\nexport const TRUSTIFICATION_ENV = buildTrustificationEnv(process.env);\n",
    "import type { Options } from \"http-proxy-middleware\";\nimport { TRUSTIFICATION_ENV } from \"./environment.js\";\n\nexport const proxyMap: Record<string, Options> = {\n  ...(TRUSTIFICATION_ENV.OIDC_SERVER_IS_EMBEDDED === \"true\" && {\n    \"/auth\": {\n      target: TRUSTIFICATION_ENV.OIDC_SERVER_URL || \"http://localhost:8090\",\n      logLevel: process.env.DEBUG ? \"debug\" : \"info\",\n      changeOrigin: true,\n      onProxyReq: (proxyReq, req, _res) => {\n        // Keycloak needs these header set so we can function in Kubernetes (non-OpenShift)\n        // https://www.keycloak.org/server/reverseproxy\n        //\n        // Note, on OpenShift, this works as the haproxy implementation\n        // for the OpenShift route is setting these for us automatically\n        //\n        // We saw problems with including the below broke the OpenShift route\n        //  {\"X-Forwarded-Proto\", req.protocol} broke the OpenShift\n        //  {\"X-Forwarded-Port\", req.socket.localPort}\n        //  {\"Forwarded\", `for=${req.socket.remoteAddress};proto=${req.protocol};host=${req.headers.host}`}\n        // so we are not including even though they are customary\n        //\n        req.socket.remoteAddress &&\n          proxyReq.setHeader(\"X-Forwarded-For\", req.socket.remoteAddress);\n        req.socket.remoteAddress &&\n          proxyReq.setHeader(\"X-Real-IP\", req.socket.remoteAddress);\n        req.headers.host &&\n          proxyReq.setHeader(\"X-Forwarded-Host\", req.headers.host);\n      },\n    },\n  }),\n  \"/api\": {\n    target: TRUSTIFICATION_ENV.TRUSTIFY_API_URL || \"http://localhost:8080\",\n    logLevel: process.env.DEBUG ? \"debug\" : \"info\",\n    changeOrigin: true,\n    onProxyReq: (proxyReq, req, _res) => {\n      // Add the Bearer token to the request if it is not already present, AND if\n      // the token is part of the request as a cookie\n      if (req.cookies?.keycloak_cookie && !req.headers.authorization) {\n        proxyReq.setHeader(\n          \"Authorization\",\n          `Bearer ${req.cookies.keycloak_cookie}`,\n        );\n      }\n    },\n    onProxyRes: (proxyRes, req, res) => {\n      const includesJsonHeaders =\n        req.headers.accept?.includes(\"application/json\");\n      if (\n        (!includesJsonHeaders && proxyRes.statusCode === 401) ||\n        (!includesJsonHeaders && proxyRes.statusMessage === \"Unauthorized\")\n      ) {\n        res.redirect(\"/\");\n      }\n    },\n  },\n};\n",
    "export interface MastheadBrand {\n  src: string;\n  alt: string;\n  height: string;\n}\n\nexport interface MastheadTitle {\n  text: string;\n  heading?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\n  size?: \"md\" | \"lg\" | \"xl\" | \"2xl\" | \"3xl\" | \"4xl\";\n}\n\nexport interface BrandingStrings {\n  application: {\n    title: string;\n    name?: string;\n    description?: string;\n  };\n\n  about: {\n    displayName: string;\n    imageSrc?: string;\n    documentationUrl?: string;\n  };\n\n  masthead: {\n    leftBrand?: MastheadBrand;\n    leftTitle?: MastheadTitle;\n    rightBrand?: MastheadBrand;\n  };\n}\n\n// Note: Typescript will look at the `paths` definition to resolve this import\n//       to a stub JSON file.  In the next rollup build step, that import will\n//       be replaced by the rollup virtual plugin with a dynamically generated\n//       JSON import with the actual branding information.\n// import * as stringsJson from \"@branding/strings.json\";\n\nimport * as stringsJson from \"./branding-strings-stub.json\";\n\nexport const brandingStrings =\n  stringsJson.default as unknown as BrandingStrings;\n",
    "export * from \"./environment.js\";\nexport * from \"./proxies.js\";\nexport * from \"./branding.js\";\n\n/**\n * Return a base64 encoded JSON string containing the given `env` object.\n */\nexport const encodeEnv = (env: object, exclude?: string[]): string => {\n  const filtered = exclude\n    ? Object.fromEntries(\n        Object.entries(env).filter(([key]) => !exclude.includes(key)),\n      )\n    : env;\n\n  return btoa(JSON.stringify(filtered));\n};\n\n/**\n * Return an objects from a base64 encoded JSON string.\n */\nexport const decodeEnv = (env: string): object =>\n  !env ? {} : JSON.parse(atob(env));\n\n// TODO: Include `index.html.ejs` to `index.html` template file processing...\n"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DO,IAAM,kBAAkB,CAAC,QAAQ,oBAAoB,UAAU;AAK/D,IAAM,yBAAyB;AAAA,EACpC,WAAW;AAAA,EACX;AAAA,EACA,UAAU;AAAA,EACV,OAAO;AAAA,EAEP;AAAA,EACA,0BAA0B;AAAA,EAC1B;AAAA,EACA,gBAAgB;AAAA,EAChB;AAAA,EACA;AAAA,EAEA,6BAA6B;AAAA,EAC7B;AAAA,EACA;AAAA,EAEA,oBAAoB;AAAA,EACpB;AAAA,IACkC,CAAC,OAA8B;AAAA,EACjE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EACA;AACF;AAKO,IAAM,8BAA8B,uBAAuB;AAK3D,IAAM,qBAAqB,uBAAuB,QAAQ,GAAG;;AC7G7D,IAAM,WAAoC;AAAA,KAC3C,mBAAmB,4BAA4B,UAAU;AAAA,IAC3D,SAAS;AAAA,MACP,QAAQ,mBAAmB,mBAAmB;AAAA,MAC9C,UAAU,QAAQ,IAAI,QAAQ,UAAU;AAAA,MACxC,cAAc;AAAA,MACd,YAAY,CAAC,UAAU,KAAK,SAAS;AAAA,QAanC,IAAI,OAAO,iBACT,SAAS,UAAU,mBAAmB,IAAI,OAAO,aAAa;AAAA,QAChE,IAAI,OAAO,iBACT,SAAS,UAAU,aAAa,IAAI,OAAO,aAAa;AAAA,QAC1D,IAAI,QAAQ,QACV,SAAS,UAAU,oBAAoB,IAAI,QAAQ,IAAI;AAAA;AAAA,IAE7D;AAAA,EACF;AAAA,EACA,QAAQ;AAAA,IACN,QAAQ,mBAAmB,oBAAoB;AAAA,IAC/C,UAAU,QAAQ,IAAI,QAAQ,UAAU;AAAA,IACxC,cAAc;AAAA,IACd,YAAY,CAAC,UAAU,KAAK,SAAS;AAAA,MAGnC,IAAI,IAAI,SAAS,oBAAoB,IAAI,QAAQ,eAAe;AAAA,QAC9D,SAAS,UACP,iBACA,UAAU,IAAI,QAAQ,iBACxB;AAAA,MACF;AAAA;AAAA,IAEF,YAAY,CAAC,UAAU,KAAK,QAAQ;AAAA,MAClC,MAAM,sBACJ,IAAI,QAAQ,QAAQ,SAAS,kBAAkB;AAAA,MACjD,KACI,uBAAuB,SAAS,eAAe,QAC/C,uBAAuB,SAAS,kBAAkB,gBACpD;AAAA,QACA,IAAI,SAAS,GAAG;AAAA,MAClB;AAAA;AAAA,EAEJ;AACF;;;;;;;;;;;;;;;;;;;;;;;;;AChBO,IAAM,kBACC;;;AClCP,IAAM,YAAY,CAAC,KAAa,YAA+B;AAAA,EACpE,MAAM,WAAW,UACb,OAAO,YACL,OAAO,QAAQ,GAAG,EAAE,OAAO,EAAE,UAAU,QAAQ,SAAS,GAAG,CAAC,CAC9D,IACA;AAAA,EAEJ,OAAO,KAAK,KAAK,UAAU,QAAQ,CAAC;AAAA;AAM/B,IAAM,YAAY,CAAC,SACvB,MAAM,CAAC,IAAI,KAAK,MAAM,KAAK,GAAG,CAAC;",
  "debugId": "B7BB46F085E7854864756E2164756E21",
  "names": []
}